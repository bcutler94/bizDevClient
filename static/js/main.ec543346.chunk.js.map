{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["URL","STATE_MAP","DATA_TYPE_MAP","styles","container","flex","flexDirection","justifyContent","title","textAlign","filterDiv","App","useState","month","setMonth","year","setYear","state","setState","dataType","setDataType","stateData","setStateData","metric","setMetric","useEffect","a","abbrevState","fetch","res","json","data","console","log","getData","style","filter","InputLabel","id","Select","onChange","event","target","value","autoWidth","map","ele","MenuItem","GridList","cellHeight","cols","dataPoint","table","find","GridListTile","theme","VictoryTheme","grayscale","horizontal","labels","datum","y","slice","colorScale","GridListTileBar","titlePosition","pieCharts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ec543346.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { VictoryPie, VictoryBar, VictoryLabel, VictoryChart, VictoryTheme} from 'victory'\nimport { Select, MenuItem, InputLabel, GridList, GridListTile, GridListTileBar } from '@material-ui/core';\n\n\nconst ENV = 'prod';\n\nconst URL = {\n  'prod': \"https://damp-spire-15111.herokuapp.com/\",\n  \"dev\": \"http://localhost:3001/\"\n}\n\nconst STATE_MAP = {\n  \"New Jersey\": \"nj\",\n  \"Pennsylvania\": \"pa\"\n}\n\nconst DATA_TYPE_MAP = {\n  \"Online Revenue\": \"onlineRevTable\",\n  \"Retail Revenue\": \"retailRevTable\"\n}\n\nfunction App() {\n\n  // filters\n  const [month, setMonth] = useState('ALL');\n  const [year, setYear] = useState('ALL');\n  const [state, setState] = useState('New Jersey');\n  const [dataType, setDataType] = useState(\"Online Revenue\");\n  const [stateData, setStateData] = useState({});\n  const [metric, setMetric] = useState(\"Revenue\")\n\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const abbrevState = STATE_MAP[state]\n        const res = await fetch(`${URL[ENV]}data?states=${abbrevState}`)\n        const data = await res.json();\n        setStateData({\n          ...stateData,\n          [abbrevState]: data[abbrevState]\n        });\n      } catch (e) {\n        console.log(e)\n      }\n    }\n\n    getData()\n  }, [state]);\n\n  const stateFilter = () => {\n    const STATES = [\"New Jersey\", \"Pennsylvania\"]\n    const handleChange = (event) => {\n      setState(event.target.value);\n    };\n    return (\n      <div style={styles.filter}>\n        <InputLabel id=\"state-filter\">State</InputLabel>\n        <Select\n          onChange={handleChange}\n          value={state}\n          id=\"state-filter\"\n          autoWidth={true}>\n            {\n              STATES.map(ele => {\n                return <MenuItem value={ele}>{ ele }</MenuItem>\n              })\n            }\n        </Select>\n      </div>\n    )\n  }\n\n  const monthFilter = () => {\n    const MONTHS = [\"ALL\", 'January', 'February', \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    const handleChange = (event) => {\n      setMonth(event.target.value)\n    }\n    return (\n      <div style={styles.filter}>\n        <InputLabel id=\"month-filter\">Month</InputLabel>\n        <Select\n          id='month-filter' \n          onChange={handleChange}\n          value={month}       \n          autoWidth={true}>\n          {\n            MONTHS.map(ele => {\n              return <MenuItem value={ele}>{ ele }</MenuItem>\n            })\n          }\n        </Select>\n      </div>\n    )\n  }\n\n  const yearFilter = () => {\n    const YEARS = [\"ALL\", '2021', '2020', '2019', '2018']\n    const handleChange = (event) => {\n      console.log('value', event)\n      setYear(event.target.value)\n    }\n    return (\n      <div style={styles.filter}>\n        <InputLabel id=\"year-filter\">Year</InputLabel>\n        <Select\n          id='year-filter'\n          onChange={handleChange}\n          value={year}\n          autoWidth={true}>\n          {\n            YEARS.map(ele => {\n              return <MenuItem value={ele}>{ ele }</MenuItem>\n            })\n          }\n        </Select>\n      </div>\n    )\n  }\n\n  const dataTypeFilter = () => {\n    const DATA_TYPES = [\"Online Revenue\", \"Retail Revenue\"];\n    const handleChange = (event) => {\n      setDataType(event.target.value)\n    }\n    return (\n      <div style={styles.filter}>\n        <InputLabel id=\"data-type-filter\">Data Type</InputLabel>\n        <Select\n          id='data-type-filter'\n          onChange={handleChange}\n          value={dataType}\n          autoWidth={true}>\n          {\n            DATA_TYPES.map(ele => {\n              return <MenuItem value={ele}>{ ele }</MenuItem>\n            })\n          }\n        </Select>\n      </div>\n    )\n  }\n\n  const metricFilter = () => {\n    const METRICS = [\"Handle\", \"Revenue\", \"Taxes Paid\", \"YTD Total Revenue\"];\n    const handleChange = (event) => {\n      setMetric(event.target.value)\n    }\n    return (\n      <div style={styles.filter}>\n        <InputLabel id=\"metrics-filter\">Metrics</InputLabel>\n        <Select\n          id='metrics-filter'\n          onChange={handleChange}\n          value={metric}\n          autoWidth={true}>\n          {\n            METRICS.map(ele => {\n              return <MenuItem value={ele}>{ ele }</MenuItem>\n            })\n          }\n        </Select>\n      </div>\n    )\n  }\n\n  const pieCharts = () => {\n    const data = stateData[STATE_MAP[state]]\n    console.log(data)\n    return <GridList cellHeight={400}cols={1}>\n      {data && data.map((dataPoint) => {\n        const tables = dataPoint[DATA_TYPE_MAP[dataType]]\n        const table = tables.find(({ title }) => title === metric)\n        const title = `${dataPoint.month} ${dataPoint.year}`\n        return (\n        <GridListTile cols={1}>\n          <VictoryChart\n              theme={VictoryTheme.grayscale}>\n            <VictoryBar\n              horizontal\n              labels={({ datum }) => `${datum.y}`}\n              data={table && table.data && table.data.slice(0, -1)}\n              colorScale=\"qualitative\"/>\n          </VictoryChart>\n          <GridListTileBar title={title} titlePosition='top'/>\n        </GridListTile>\n        )}\n      )}\n    </GridList>\n  }\n\n\n  return (\n    <div style={styles.container}>\n      <h1 style={styles.title}>\n        SPORTS BOOK AND ONLINE CASINO DATA\n      </h1>\n      <div style={styles.filterDiv}>\n        {\n          stateFilter()\n        }\n        {\n          monthFilter()\n        }\n        {\n          yearFilter()\n        }\n        {\n          dataTypeFilter()\n        }\n        {\n          metricFilter()\n        }\n      </div>\n      <div>\n        {\n          pieCharts()\n        }\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  title: {\n    textAlign: \"center\"\n  },\n  filterDiv: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly'\n  },\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}